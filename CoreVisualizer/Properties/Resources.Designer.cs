//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoreVisualizer.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CoreVisualizer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///flat in vec4 inColor;
        ///void main()
        ///{
        ///	gl_FragColor = inColor;
        ///}.
        /// </summary>
        internal static string arrows_fs {
            get {
                return ResourceManager.GetString("arrows_fs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in mat4 model;
        ///uniform mat4 projection;
        ///uniform mat4 view;
        ///flat out vec4 inColor;
        ///void main()
        ///{
        ///	vec4 color[3];
        ///	color[0] = vec4(1.0, 0.0, 0.0, 1.0);
        ///	color[1] = vec4(0.0, 1.0, 0.0, 1.0);
        ///	color[2] = vec4(0.0, 0.0, 1.0, 1.0);
        ///	gl_Position = projection * view * model * vec4(position, 1.0);
        ///	inColor = color[gl_InstanceID];
        ///}
        ///        .
        /// </summary>
        internal static string arrows_vs {
            get {
                return ResourceManager.GetString("arrows_vs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///flat in vec4 inColor;
        ///void main()
        ///{
        ///	gl_FragColor = inColor;
        ///}.
        /// </summary>
        internal static string grid_fs {
            get {
                return ResourceManager.GetString("grid_fs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0) in vec3 position;
        ///layout(location = 1) in vec4 color;
        ///uniform mat4 perspective;
        ///uniform mat4 view;
        ///flat out vec4 inColor;
        ///void main()
        ///{
        ///	gl_Position = perspective * view * vec4(position, 1.0);
        ///	inColor = color;
        ///}
        ///.
        /// </summary>
        internal static string grid_vs {
            get {
                return ResourceManager.GetString("grid_vs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///in vec2 texCoords;
        ///in float layer;
        ///uniform sampler2DArray labels;
        ///void main()
        ///{
        ///	vec3 color[3];
        ///    color[0] = vec3(1.0, 0.0, 0.0);
        ///    color[1] = vec3(0.0, 1.0, 0.0);
        ///    color[2] = vec3(0.0, 0.0, 1.0);
        ///    float scale = texture(labels, vec3(texCoords.x, 1 - texCoords.y, layer)).r;
        ///    gl_FragColor = vec4(scale * color[int(layer)], scale);
        ///}.
        /// </summary>
        internal static string labels_fs {
            get {
                return ResourceManager.GetString("labels_fs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0) in vec2 position;
        ///layout (location = 1) in mat4 model;
        ///uniform mat4 projection;
        ///uniform mat4 view;
        ///out vec2 texCoords;
        ///out float layer;
        ///void main()
        ///{
        ///	vec3 viewRight = vec3(view[0][0], view[1][0], view[2][0]);
        ///    vec3 viewUp = vec3(view[0][1], view[1][1], view[2][1]);
        ///    vec3 newPos = viewRight * position.x + viewUp * position.y;
        ///    gl_Position = projection * view * model * vec4(newPos, 1.0);
        ///    texCoords = position;
        ///    layer = float(gl_InstanceID); [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string labels_vs {
            get {
                return ResourceManager.GetString("labels_vs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///flat in vec4 inColor;
        ///void main()
        ///{
        ///    gl_FragColor = inColor;
        ///}.
        /// </summary>
        internal static string mesh_fs {
            get {
                return ResourceManager.GetString("mesh_fs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec4 color;
        ///uniform mat4 projection;
        ///uniform mat4 view;
        ///uniform mat4 model;
        ///flat out vec4 inColor;
        ///void main()
        ///{
        ///    gl_Position = projection * view * model * vec4(position, 1.0);
        ///    inColor = color;
        ///}.
        /// </summary>
        internal static string mesh_vs {
            get {
                return ResourceManager.GetString("mesh_vs", resourceCulture);
            }
        }
    }
}
